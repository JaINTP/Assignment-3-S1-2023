#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Unit tests for the shopping_cart module.

This module contains unit tests for the shopping cart system implemented in the shopping_cart 
module. It tests the following functionalities:
- Adding shopping records.
- Searching shopping records by product name.
- Calculating the total cost of items in the shopping cart, including shipping and surcharges.
- Displaying shopping records in a formatted table.

Tests are performed using the unittest framework, with input mocking and output capturing 
to validate the expected behavior of each function.
"""

import unittest
from unittest.mock import patch
from io import StringIO
import shopping_cart


class TestShoppingCart(unittest.TestCase):
    """
    Test case class for the shopping_cart module.

    This class contains the unit tests that ensure the core functionalities of the shopping_cart 
    module work as expected. It tests the following:
    - add_record: Adding records to the cart.
    - search_record: Searching records based on product name.
    - total_cost: Calculating the total cost of items in the cart.
    - show_records: Displaying the records in a formatted table.
    """

    @patch('builtins.input', side_effect=["2", "1", "Delivery", "END"])
    def test_add_record(self, mock_input):
        """
        Test the add_record function of the shopping_cart module.

        This test mocks user input to simulate adding a record to the shopping cart.
        It verifies that the correct record is added to the shopping_record_list, 
        including the product code, name, value, price, quantity, and shipping method.
        """
        # Clear the shopping record list before the test
        shopping_cart.shopping_record_list = []
        
        # Call the add_record function with mocked input
        shopping_cart.add_record()

        # Verify that one record has been added
        self.assertEqual(len(shopping_cart.shopping_record_list), 1)

        # Verify that the expected record is added, with proper formatting
        expected_output = "2/Tea Set/High/39.95/1/Delivery"
        self.assertEqual(expected_output, shopping_cart.shopping_record_list[0])

    @patch('builtins.input', side_effect=["et"])
    def test_search_record(self, mock_input):
        """
        Test the search_record function of the shopping_cart module.

        This test checks if the search_record function correctly handles case-insensitive search
        and returns the correct product when the user searches for part of the product name.
        The test verifies that the search results match the expected output.
        """
        # Mocking some shopping records
        shopping_cart.shopping_record_list = [
            "2/Tea Set/High/39.95/2/Delivery",
            "5/Coffee Capsule Holder/High/29.95/1/Pick-up"
        ]

        # Capture the output from the search_record function
        with patch('sys.stdout', new_callable=StringIO) as mock_stdout:
            shopping_cart.search_record()

        # Get the output generated by search_record
        output = mock_stdout.getvalue()
        
        # Expected output after the search operation
        expected_search_output = (
            "Code  Product                              Value  Price $  Quantity  Cost $\n"
            "----  -----------------------------------  -----  -------  --------  ------\n"
            "2     Tea Set                              High   39.95    2         91.89\n"
            "\nTotal cost is: $91.89\n"
        )

        # Compare the actual output with the expected output
        self.assertEqual(expected_search_output, output)

    def test_total_cost(self):
        """
        Test the total_cost function of the shopping_cart module.

        This test verifies that the total_cost function correctly calculates the total cost of 
        multiple items, including handling delivery fees and surcharges for high-value products. 
        The test compares the output with the expected total cost.
        """
        # Mocking some shopping records to calculate total cost
        shopping_cart.shopping_record_list = [
            "2/Tea Set/High/39.95/2/Delivery",
            "5/Coffee Capsule Holder/High/29.95/1/Pick-up"
        ]

        # Capture the output from the total_cost function
        with patch('sys.stdout', new_callable=StringIO) as mock_stdout:
            shopping_cart.total_cost(shopping_cart.shopping_record_list)

        # Get the output generated by total_cost
        output = mock_stdout.getvalue()

        # Expected total cost output after applying delivery and high-value surcharges
        expected_total_cost_output = "\nTotal cost is: $121.84\n"

        # Compare the actual output with the expected output
        self.assertEqual(expected_total_cost_output, output)

    @patch('builtins.input', side_effect=["END"])
    def test_show_records(self, mock_input):
        """
        Test the show_records function of the shopping_cart module.

        This test verifies that the show_records function correctly displays all records in 
        the shopping cart in a properly formatted table. The test ensures that all product details, 
        including code, name, value, price, quantity, and shipping method, are correctly displayed.
        """
        # Mocking some shopping records
        shopping_cart.shopping_record_list = [
            "2/Tea Set/High/39.95/2/Delivery",
            "5/Coffee Capsule Holder/High/29.95/1/Pick-up"
        ]

        # Defining headers for the table
        headers = [
            [
                ("Code", 4),
                ("Product", 35),
                ("Value", 5),
                ("Price $", 7),
                ("Quantity", 8),
                ("Shipping Method", 15),
            ],
            [
                ("-" * 4, 4),
                ("-" * 35, 35),
                ("-" * 5, 5),
                ("-" * 7, 7),
                ("-" * 8, 8),
                ("-" * 15, 15),
            ]
        ]

        # Capture the output from the show_records function
        with patch('sys.stdout', new_callable=StringIO) as mock_stdout:
            shopping_cart.show_records(headers, shopping_cart.shopping_record_list)

        # Get the output generated by show_records
        output = mock_stdout.getvalue()

        # Expected output of the table with records
        expected_show_output = (
            "Code  Product                              Value  Price $  Quantity  Shipping Method\n"
            "----  -----------------------------------  -----  -------  --------  ---------------\n"
            "2     Tea Set                              High   39.95    2         Delivery\n"
            "5     Coffee Capsule Holder                High   29.95    1         Pick-up\n"
        )

        # Compare the actual output with the expected output
        self.assertEqual(expected_show_output, output)


if __name__ == '__main__':
    unittest.main()

